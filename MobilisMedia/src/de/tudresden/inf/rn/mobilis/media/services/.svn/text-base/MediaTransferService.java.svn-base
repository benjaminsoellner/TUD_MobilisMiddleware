package de.tudresden.inf.rn.mobilis.media.services;

import java.io.File;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.util.Log;
import android.widget.RemoteViews;
import de.tudresden.inf.rn.mobilis.media.Constants;
import de.tudresden.inf.rn.mobilis.media.R;
import de.tudresden.inf.rn.mobilis.media.core.FileTransfer;
import de.tudresden.inf.rn.mobilis.media.core.FileTransferManager;
import de.tudresden.inf.rn.mobilis.media.core.FileTransferObserver;
import de.tudresden.inf.rn.mobilis.media.core.FileTransferRequestObserver;
import de.tudresden.inf.rn.mobilis.media.core.IncomingFileTransfer;
import de.tudresden.inf.rn.mobilis.media.core.OutgoingFileTransfer;
import de.tudresden.inf.rn.mobilis.media.parcelables.FileTransferInfo;
import de.tudresden.inf.rn.mobilis.saaas.IXMPPService;
import de.tudresden.inf.rn.mobilis.saaas.XMPPConstants;
import de.tudresden.inf.rn.mobilis.saaas.parcelable.XMPPFile;

public class FileTransferService extends Service implements ServiceConnection {

	public static int PREF_TIMEOUT = 60;
	public static int PREF_BLOCKSIZE = 1024;
	public static String PREF_DIRECTORY = "/sdcard/download"; 
	
	private TransferBinder transferBinder = null;
	private IXMPPService xmppService = null;
	private boolean connected = false;
	private List<Intent> intentQueue = new LinkedList<Intent>();
	private SharedPreferences preferences = null;
	
	@Override
	public void onCreate() {
		// 1. the service is created -> bind the XMPP service
		super.onCreate();
		this.preferences = ApplicationInitializer.forApplicationContext(this).getPreferences();
		Intent serviceIntent = new Intent(IXMPPService.class.getName());
		this.bindService(serviceIntent, this, Context.BIND_AUTO_CREATE);
	}
	
	public void onServiceConnected(ComponentName name, IBinder binder) {
		// 2. the XMPP service is bound -> initiate binder, connect to XMPP
		this.xmppService = IXMPPService.Stub.asInterface(binder);
		this.transferBinder = new FileTransferService.TransferBinder(
				new FileTransferManager(this.xmppService)
			);
		try {
			this.xmppService.connect(new Messenger(new Handler() {
						@Override
						public void handleMessage(Message msg) {
							super.handleMessage(msg);
							if (msg.what == XMPPConstants.MSG_CONNECT) 
								if (msg.arg1 == XMPPConstants.MSG_STATUS_SUCCESS)
									FileTransferService.this.onXMPPConnect();
								else
									FileTransferService.this.onXMPPFailure();
						}
					}));
		} catch (RemoteException e) {
			this.onXMPPFailure();
		}
	}

	public void onServiceDisconnected(ComponentName name) {
		// 2*. the XMPP service cannot be bound -> stop service
		this.connected = false;
		this.xmppService = null;
		this.stopSelf();
	}
	
	public void onXMPPConnect() {
		// 3. the XMPP connection has been established -> process intents
		this.connected = true;
		this.processIntentQueue();
	}

	public void onXMPPFailure() {
		// 3*. the XMPP connection cannot be established -> unbind MXA
		this.connected = false;
		this.unbindService(this);
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		// 4. a client requests to bind to the service.
		return this.transferBinder;
	}

	@Override
	public void onStart(Intent intent, int startId) {
		// 5. a client requests to start the service
		super.onStart(intent, startId);
		if (this.connected)
			this.processIntent(intent);
		else
			this.intentQueue.add(intent);
	}
	
	private void processIntentQueue() {
		// 6. the intent queue can be processed
		for (Intent i: this.intentQueue)
			this.processIntent(i);
	}

	private void processIntent(Intent intent) {
		// 7. a single intent is processed
		if (intent == null || intent.getAction() == null) return;
		if (intent.getAction().equals(Constants.intent.SEND_TO_JID)) {
			Log.i(FileTransferService.class.getName(), "Initializing File Transfer");
			String[] paths = intent.getStringArrayExtra(Constants.intent.extra.STRA_PATHS);
			String   to = intent.getStringExtra(Constants.intent.extra.STR_TO);
			String   description = intent.getStringExtra(Constants.intent.extra.STR_DESCRIPTION);
			for (String p: paths) {
				String mimeType = this.getContentResolver().getType( Uri.fromFile(new File(p)) );
				int blockSize = this.preferences.getInt("transfer_preferences", FileTransferService.PREF_BLOCKSIZE);
				XMPPFile file = new XMPPFile("", to, description, p, mimeType, blockSize, -1);
				try {
					this.transferBinder.startTransferToJid(file);
				} catch (RemoteException e) {
					// TODO add message
				}
			}
		}
	}	
	
	private class TransferBinder extends IFileTransferService.Stub
			implements FileTransferObserver, FileTransferRequestObserver {
		
		private FileTransferManager transferManager;
		private FileTransferService.TransferNotifier transferNotifier;
		private Collection<Messenger> incomingFileTransferCallbacks;
		private Collection<Messenger> outgoingFileTransferCallbacks;
		
		public TransferBinder(FileTransferManager manager) {
			this.transferManager = manager;
			this.transferNotifier = new FileTransferService.TransferNotifier();
			this.incomingFileTransferCallbacks = new HashSet<Messenger>();
			this.outgoingFileTransferCallbacks = new HashSet<Messenger>();
			this.transferManager.registerFileTransferRequestObserver(this);
		}

		public int startTransferToJid(XMPPFile file) throws RemoteException {
			OutgoingFileTransfer transfer = this.transferManager.addOutgoingFileTransfer(file);
			transfer.registerFileTransferObserver(this);
			transfer.initiate();
			return transfer.getId();
		}

		public FileTransferInfo getFileTransferInfo(int id)
				throws RemoteException {
			FileTransfer ft = this.transferManager.getFileTransferByID(id);
			if (ft == null) return null;
			XMPPFile f = ft.getXmppFile(); 
			FileTransferInfo fti = new FileTransferInfo(
					id,
					ft.getState(),
					(ft instanceof OutgoingFileTransfer ?
							Constants.enumeration.DIRECTION_OUT :
							Constants.enumeration.DIRECTION_IN),
					ft.getBlocksTransferred());
			fti.xmppFile = new XMPPFile(
					f.from, f.to, f.description, f.path, f.mimeType,
					ft.getBlockSize(),
					ft.getTotalSize()
				);
			return fti;
		}
		
		public int[] getIds(int direction) throws RemoteException {
			if (direction == Constants.enumeration.DIRECTION_IN)
				return this.transferManager.getIncomingFileTransferIDs();
			else if (direction == Constants.enumeration.DIRECTION_OUT)
				return this.transferManager.getOutgoingFileTransferIDs();
			else
				return null;
		}
		
		public boolean acceptTransferFromJid(String filename, int id) throws RemoteException {
			FileTransfer ft = this.transferManager.getFileTransferByID(id);
			if (ft == null || !(ft instanceof IncomingFileTransfer))
				return false;
			else {
				SharedPreferences ps = FileTransferService.this.preferences; 
				int blockSize    = ps.getInt("transfer_blocksize", FileTransferService.PREF_BLOCKSIZE);
				String directory = ps.getString("transfer_directory", FileTransferService.PREF_DIRECTORY);
				((IncomingFileTransfer)ft).initiate(directory + "/" + filename, blockSize);
				return true;
			}
		}

		public boolean denyTransferFromJid(int id) throws RemoteException {
			FileTransfer ft = this.transferManager.getFileTransferByID(id);
			if (ft == null || !(ft instanceof IncomingFileTransfer))
				return false;
			else {
				((IncomingFileTransfer)ft).terminate();
				return true;
			}
		}
		
		public void registerFileTransferMessenger(Messenger messenger, int direction)
				throws RemoteException {
			if (messenger!=null && (direction & Constants.enumeration.DIRECTION_IN) > 0)
				this.incomingFileTransferCallbacks.add(messenger);
			if (messenger!=null && (direction & Constants.enumeration.DIRECTION_OUT) > 0)
				this.outgoingFileTransferCallbacks.add(messenger);
		
		}

		public void unregisterFileTransferMessenger(Messenger messenger, int direction)
				throws RemoteException {
			if (messenger!=null && (direction & Constants.enumeration.DIRECTION_IN) > 0)
				this.incomingFileTransferCallbacks.remove(messenger);
			if (messenger!=null && (direction & Constants.enumeration.DIRECTION_OUT) > 0)
				this.outgoingFileTransferCallbacks.remove(messenger);
		}
		
		public void requested(FileTransfer sender) {
			this.notifyFileTransferMessengers(sender);
			final Resources resources = FileTransferService.this.getResources();
			String from = sender.getXmppFile().from;
			String name = sender.getXmppFile().path;
			sender.registerFileTransferObserver(this);
			this.transferNotifier.addEventNotification(
					resources.getString(R.string.notification_transfer_incoming_title),
					String.format(
						resources.getString(R.string.notification_transfer_incoming_content),
						from),
					String.format(
						resources.getString(R.string.notification_transfer_incoming_ticker),
						from, name),
					sender.getId(),
					true);
		}
		
		public void initiated(FileTransfer sender) {
			this.notifyFileTransferMessengers(sender);
			Log.d("FileTransferBinder", "Transfer initiated: " + String.valueOf(sender.getId()));
		}
		
		public void negotiation(FileTransfer sender) {
			this.notifyFileTransferMessengers(sender);
			Log.d("FileTransferBinder", "Transfer negotiated: " + String.valueOf(sender.getId()));
			final Resources resources = FileTransferService.this.getResources();
			String contentText = "";
			double progressBarState = 0;
			int number = this.transferManager.getNumberOfTransfers();
			if (number > 1) {
				contentText = String.format(
						resources.getString(R.string.notification_transfer_ongoing_more),
						number);
				progressBarState = TransferNotifier.PROGRESS_BAR_HIDDEN; 
			} else {
				contentText = "";
				progressBarState = TransferNotifier.PROGRESS_BAR_INDETERMINATE;
			}
			this.transferNotifier.updateServiceNotification(
					resources.getString(R.string.notification_transfer_ongoing_title),
					contentText,
					String.format(resources.getString(R.string.notification_transfer_ongoing_ticker),
							sender.getXmppFile().path,
							sender.getXmppFile().to),
					progressBarState);
		}

		public void blockTransferred(FileTransfer sender, long block) {
			this.notifyFileTransferMessengers(sender);
			Log.d( "FileTransferBinder", "Transfer block transferred: " + String.valueOf(sender.getId()) + " - " + String.valueOf(sender.getPercentage()) + "%");
			final Resources resources = FileTransferService.this.getResources();
			String contentText = "";
			double progressBarState = 0;
			int number = this.transferManager.getNumberOfTransfers();
			if (number > 1) {
				contentText = String.format(
						resources.getString(R.string.notification_transfer_ongoing_more),
						number);
				progressBarState = TransferNotifier.PROGRESS_BAR_HIDDEN; 
			} else {
				contentText = resources.getString(R.string.notification_transfer_ongoing_one);
				progressBarState = sender.getPercentage();
			}
			this.transferNotifier.updateServiceNotification(
					resources.getString(R.string.notification_transfer_ongoing_title),
					contentText,
					null,
					progressBarState);

		}
		
		public void failed(FileTransfer sender, int reason, String message) {
			this.notifyFileTransferMessengers(sender);
			Log.d("FileTransferBinder", "Transfer failed: " + String.valueOf(sender.getId()));
			final Resources resources = FileTransferService.this.getResources();
			this.transferNotifier.addEventNotification(
					resources.getString(R.string.notification_transfer_failed_title),
					resources.getString(R.string.notification_transfer_failed_status),
					resources.getString(R.string.notification_transfer_failed_ticker),
					sender.getId(),
					true);
			this.completed(false);
		}

		public void finished(FileTransfer sender) {
			this.notifyFileTransferMessengers(sender);
			Log.d("FileTransferBinder", "Transfer finished: " + String.valueOf(sender.getId()));
			final Resources resources = FileTransferService.this.getResources();
			if (this.transferManager.getNumberOfTransfers() <= 1) 
				this.transferNotifier.addEventNotification(
						resources.getString(R.string.notification_transfer_finished_title),
						resources.getString(R.string.notification_transfer_finished_status),
						resources.getString(R.string.notification_transfer_finished_ticker),
						sender.getId(),
						false);
			this.completed(true);
		}
		
		private void completed(boolean successful) {
			final Resources resources = FileTransferService.this.getResources();
			String contentText = "";
			String titleText = "";
			int number = this.transferManager.getNumberOfTransfers();
			if (number > 1) {
				titleText = resources.getString(R.string.notification_transfer_ongoing_title);
				contentText = String.format(
						resources.getString(R.string.notification_transfer_ongoing_more),
						number-1);
				this.transferNotifier.updateServiceNotification(titleText, contentText, "",
						TransferNotifier.PROGRESS_BAR_HIDDEN);
			} else 
				this.transferNotifier.cancelServiceNotification();
		}

		public void notifyFileTransferMessengers(FileTransfer sender) {
			Collection<Messenger> messengers = null;
			if (sender instanceof OutgoingFileTransfer)
				messengers = this.outgoingFileTransferCallbacks;
			else if (sender instanceof IncomingFileTransfer)
				messengers = this.incomingFileTransferCallbacks;
			// prepare message
			int id = sender.getId();
			Message msg = new Message();
			msg.what = Constants.message.MSG_TRANSFERSTATECHANGED;
			msg.arg1 = id;
			try {
				msg.getData().putParcelable(
						Constants.message.data.PAR_FILE_TRANSFER_INFO,
						this.getFileTransferInfo(id));
			} catch (RemoteException e) {}
			// send out message to receivers
			for (Messenger m: messengers) {
				try {
					m.send(msg);
				} catch (RemoteException e) {}
			}
		}
		
	}
	
	private class TransferNotifier {
		
		private final static double PROGRESS_BAR_HIDDEN = -2.0;
		private final static double PROGRESS_BAR_INDETERMINATE = -1.0;
		private final static int SERVICE_NOTIFICATION_ID = -1;
		private NotificationManager notificationManager;
		private Notification        serviceNotification;
		private PendingIntent       serviceNotificationIntent;
		private RemoteViews         serviceNotificationView;

		public TransferNotifier() {
			FileTransferService owner = FileTransferService.this;
			Resources resources = owner.getResources();
			// Remote View
			RemoteViews notificationView = new RemoteViews(owner.getPackageName(), R.layout.file_transfer_notification);
			notificationView.setImageViewResource(R.id.icon, R.drawable.notification_xmpp_service);
			// Notification
			Notification notification = new Notification(
					R.drawable.notification_xmpp_service,
					resources.getString(R.string.notification_transfer_ongoing_ticker),
					(new Date()).getTime()
				);
			notification.flags = Notification.FLAG_NO_CLEAR | Notification.FLAG_ONGOING_EVENT;
			notification.contentView = notificationView;
			// Pending Intent
			PendingIntent notificationIntent = PendingIntent.getActivity(
					owner,
					FileTransferService.TransferNotifier.SERVICE_NOTIFICATION_ID,
					new Intent(Constants.intent.CHECK_TRANSFER),
					0);
			this.notificationManager = (NotificationManager) owner.getSystemService(NOTIFICATION_SERVICE);
			this.serviceNotification = notification;
			this.serviceNotificationView   = notificationView;
			this.serviceNotificationIntent = notificationIntent;
		}
		
		public void cancelServiceNotification() {
			this.notificationManager.cancel(FileTransferService.TransferNotifier.SERVICE_NOTIFICATION_ID);
			
		}

		public void updateServiceNotification(String titleText, String contentText, String tickerText, double progress) {
			Notification  n = this.serviceNotification;
			RemoteViews   v = this.serviceNotificationView;
			PendingIntent i = this.serviceNotificationIntent;
			if (progress == FileTransferService.TransferNotifier.PROGRESS_BAR_HIDDEN) {
				n.contentView = null;
				n.setLatestEventInfo(FileTransferService.this, titleText, contentText, i);
			} else {
				v.setProgressBar(R.id.progress, 100, (int)progress,
						(progress==FileTransferService.TransferNotifier.PROGRESS_BAR_INDETERMINATE));
				v.setTextViewText(R.id.percentage,
						(progress>FileTransferService.TransferNotifier.PROGRESS_BAR_INDETERMINATE ? 
								String.valueOf((int)progress)+"%" : "") );
				v.setTextViewText(R.id.title, titleText);
				n.contentView = v;
				n.contentIntent = i;
			}
			n.tickerText = tickerText;
			this.notificationManager.notify(-1, n);
			
		}
		
		public void addEventNotification(String titleText, String contentText, String tickerText, int requestCode, boolean important) {
			
			FileTransferService owner = FileTransferService.this;
			Notification notification = new Notification(
					(important ? R.drawable.notification_xmpp_event : R.drawable.notification_xmpp_service),
					tickerText,
					(new Date()).getTime());
			notification.defaults = Notification.DEFAULT_SOUND;
			notification.flags = Notification.FLAG_AUTO_CANCEL;
			PendingIntent intent = PendingIntent.getActivity(
					owner,
					requestCode,
					new Intent(Constants.intent.CHECK_TRANSFER),
					0);
			notification.setLatestEventInfo(owner, titleText, contentText, intent);
			this.notificationManager.notify(requestCode, notification);
			
		}
		
	}

}
